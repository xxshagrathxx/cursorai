{"version":3,"file":"web-0c300159.js","sources":["../../node_modules/@capacitor-firebase/authentication/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { EmailAuthProvider, FacebookAuthProvider, GithubAuthProvider, GoogleAuthProvider, OAuthCredential, OAuthProvider, RecaptchaVerifier, TwitterAuthProvider, applyActionCode, browserLocalPersistence, browserSessionPersistence, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getRedirectResult, inMemoryPersistence, indexedDBLocalPersistence, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, unlink, updateEmail, updatePassword, updateProfile, verifyBeforeUpdateEmail, } from 'firebase/auth';\nimport { Persistence, ProviderId } from './definitions';\nexport class FirebaseAuthenticationWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.lastConfirmationResult = new Map();\n        const auth = getAuth();\n        auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n        auth.onIdTokenChanged(user => void this.handleIdTokenChange(user));\n    }\n    async applyActionCode(options) {\n        const auth = getAuth();\n        return applyActionCode(auth, options.oobCode);\n    }\n    async createUserWithEmailAndPassword(options) {\n        const auth = getAuth();\n        const userCredential = await createUserWithEmailAndPassword(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async confirmPasswordReset(options) {\n        const auth = getAuth();\n        return confirmPasswordReset(auth, options.oobCode, options.newPassword);\n    }\n    async confirmVerificationCode(options) {\n        const { verificationCode, verificationId } = options;\n        const confirmationResult = this.lastConfirmationResult.get(verificationId);\n        if (!confirmationResult) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING);\n        }\n        const userCredential = await confirmationResult.confirm(verificationCode);\n        return this.createSignInResult(userCredential, null);\n    }\n    async deleteUser() {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return deleteUser(currentUser);\n    }\n    async fetchSignInMethodsForEmail(options) {\n        const auth = getAuth();\n        const signInMethods = await fetchSignInMethodsForEmail(auth, options.email);\n        return {\n            signInMethods,\n        };\n    }\n    async getPendingAuthResult() {\n        this.throwNotAvailableError();\n    }\n    async getCurrentUser() {\n        const auth = getAuth();\n        const userResult = this.createUserResult(auth.currentUser);\n        const result = {\n            user: userResult,\n        };\n        return result;\n    }\n    async getIdToken(options) {\n        const auth = getAuth();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        const idToken = await auth.currentUser.getIdToken(options === null || options === void 0 ? void 0 : options.forceRefresh);\n        const result = {\n            token: idToken || '',\n        };\n        return result;\n    }\n    async getRedirectResult() {\n        const auth = getAuth();\n        const userCredential = await getRedirectResult(auth);\n        const authCredential = userCredential\n            ? OAuthProvider.credentialFromResult(userCredential)\n            : null;\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async getTenantId() {\n        const auth = getAuth();\n        return {\n            tenantId: auth.tenantId,\n        };\n    }\n    async isSignInWithEmailLink(options) {\n        const auth = getAuth();\n        return {\n            isSignInWithEmailLink: isSignInWithEmailLink(auth, options.emailLink),\n        };\n    }\n    async linkWithApple(options) {\n        const provider = new OAuthProvider(ProviderId.APPLE);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithEmailAndPassword(options) {\n        const authCredential = EmailAuthProvider.credential(options.email, options.password);\n        const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithEmailLink(options) {\n        const authCredential = EmailAuthProvider.credentialWithLink(options.email, options.emailLink);\n        const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithFacebook(options) {\n        const provider = new FacebookAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = FacebookAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithGameCenter() {\n        this.throwNotAvailableError();\n    }\n    async linkWithGithub(options) {\n        const provider = new GithubAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = GithubAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithGoogle(options) {\n        const provider = new GoogleAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = GoogleAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithMicrosoft(options) {\n        const provider = new OAuthProvider(ProviderId.MICROSOFT);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithOpenIdConnect(options) {\n        const provider = new OAuthProvider(options.providerId);\n        this.applySignInOptions(options, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithPhoneNumber(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        if (!options.phoneNumber) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n        }\n        if (!options.recaptchaVerifier ||\n            !(options.recaptchaVerifier instanceof RecaptchaVerifier)) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n        }\n        try {\n            const confirmationResult = await linkWithPhoneNumber(currentUser, options.phoneNumber, options.recaptchaVerifier);\n            const { verificationId } = confirmationResult;\n            this.lastConfirmationResult.set(verificationId, confirmationResult);\n            const event = {\n                verificationId,\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n        }\n        catch (error) {\n            const event = {\n                message: this.getErrorMessage(error),\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n        }\n    }\n    async linkWithPlayGames() {\n        this.throwNotAvailableError();\n    }\n    async linkWithTwitter(options) {\n        const provider = new TwitterAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = TwitterAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async linkWithYahoo(options) {\n        const provider = new OAuthProvider(ProviderId.YAHOO);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async reload() {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return reload(currentUser);\n    }\n    async revokeAccessToken(options) {\n        const auth = getAuth();\n        return revokeAccessToken(auth, options.token);\n    }\n    async sendEmailVerification(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return sendEmailVerification(currentUser, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n    }\n    async sendPasswordResetEmail(options) {\n        const auth = getAuth();\n        return sendPasswordResetEmail(auth, options.email, options.actionCodeSettings);\n    }\n    async sendSignInLinkToEmail(options) {\n        const auth = getAuth();\n        return sendSignInLinkToEmail(auth, options.email, options.actionCodeSettings);\n    }\n    async setLanguageCode(options) {\n        const auth = getAuth();\n        auth.languageCode = options.languageCode;\n    }\n    async setPersistence(options) {\n        const auth = getAuth();\n        switch (options.persistence) {\n            case Persistence.BrowserLocal:\n                await setPersistence(auth, browserLocalPersistence);\n                break;\n            case Persistence.BrowserSession:\n                await setPersistence(auth, browserSessionPersistence);\n                break;\n            case Persistence.IndexedDbLocal:\n                await setPersistence(auth, indexedDBLocalPersistence);\n                break;\n            case Persistence.InMemory:\n                await setPersistence(auth, inMemoryPersistence);\n                break;\n        }\n    }\n    async setTenantId(options) {\n        const auth = getAuth();\n        auth.tenantId = options.tenantId;\n    }\n    async signInAnonymously() {\n        const auth = getAuth();\n        const userCredential = await signInAnonymously(auth);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithApple(options) {\n        const provider = new OAuthProvider(ProviderId.APPLE);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithCustomToken(options) {\n        const auth = getAuth();\n        const userCredential = await signInWithCustomToken(auth, options.token);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithEmailAndPassword(options) {\n        const auth = getAuth();\n        const userCredential = await signInWithEmailAndPassword(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithEmailLink(options) {\n        const auth = getAuth();\n        const userCredential = await signInWithEmailLink(auth, options.email, options.emailLink);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithFacebook(options) {\n        const provider = new FacebookAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = FacebookAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGithub(options) {\n        const provider = new GithubAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = GithubAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGoogle(options) {\n        const provider = new GoogleAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = GoogleAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithMicrosoft(options) {\n        const provider = new OAuthProvider(ProviderId.MICROSOFT);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithOpenIdConnect(options) {\n        const provider = new OAuthProvider(options.providerId);\n        this.applySignInOptions(options, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithPhoneNumber(options) {\n        if (!options.phoneNumber) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n        }\n        if (!options.recaptchaVerifier ||\n            !(options.recaptchaVerifier instanceof RecaptchaVerifier)) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n        }\n        const auth = getAuth();\n        try {\n            const confirmationResult = await signInWithPhoneNumber(auth, options.phoneNumber, options.recaptchaVerifier);\n            const { verificationId } = confirmationResult;\n            this.lastConfirmationResult.set(verificationId, confirmationResult);\n            const event = {\n                verificationId,\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n        }\n        catch (error) {\n            const event = {\n                message: this.getErrorMessage(error),\n            };\n            this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n        }\n    }\n    async signInWithPlayGames() {\n        this.throwNotAvailableError();\n    }\n    async signInWithGameCenter() {\n        this.throwNotAvailableError();\n    }\n    async signInWithTwitter(options) {\n        const provider = new TwitterAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = TwitterAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithYahoo(options) {\n        const provider = new OAuthProvider(ProviderId.YAHOO);\n        this.applySignInOptions(options || {}, provider);\n        const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signOut() {\n        const auth = getAuth();\n        await auth.signOut();\n    }\n    async unlink(options) {\n        const auth = getAuth();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        const user = await unlink(auth.currentUser, options.providerId);\n        const userResult = this.createUserResult(user);\n        const result = {\n            user: userResult,\n        };\n        return result;\n    }\n    async updateEmail(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return updateEmail(currentUser, options.newEmail);\n    }\n    async updatePassword(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return updatePassword(currentUser, options.newPassword);\n    }\n    async updateProfile(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return updateProfile(currentUser, {\n            displayName: options.displayName,\n            photoURL: options.photoUrl,\n        });\n    }\n    async useAppLanguage() {\n        const auth = getAuth();\n        auth.useDeviceLanguage();\n    }\n    async useEmulator(options) {\n        const auth = getAuth();\n        const port = options.port || 9099;\n        const scheme = options.scheme || 'http';\n        if (options.host.includes('://')) {\n            connectAuthEmulator(auth, `${options.host}:${port}`);\n        }\n        else {\n            connectAuthEmulator(auth, `${scheme}://${options.host}:${port}`);\n        }\n    }\n    async verifyBeforeUpdateEmail(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return verifyBeforeUpdateEmail(currentUser, options === null || options === void 0 ? void 0 : options.newEmail, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n    }\n    handleAuthStateChange(user) {\n        const userResult = this.createUserResult(user);\n        const change = {\n            user: userResult,\n        };\n        this.notifyListeners(FirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT, change, true);\n    }\n    async handleIdTokenChange(user) {\n        if (!user) {\n            return;\n        }\n        const idToken = await user.getIdToken(false);\n        const result = {\n            token: idToken,\n        };\n        this.notifyListeners(FirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT, result, true);\n    }\n    applySignInOptions(options, provider) {\n        if (options.customParameters) {\n            const customParameters = {};\n            options.customParameters.map(parameter => {\n                customParameters[parameter.key] = parameter.value;\n            });\n            provider.setCustomParameters(customParameters);\n        }\n        if (options.scopes) {\n            for (const scope of options.scopes) {\n                provider.addScope(scope);\n            }\n        }\n    }\n    signInWithPopupOrRedirect(provider, mode) {\n        const auth = getAuth();\n        if (mode === 'redirect') {\n            return signInWithRedirect(auth, provider);\n        }\n        else {\n            return signInWithPopup(auth, provider);\n        }\n    }\n    linkCurrentUserWithPopupOrRedirect(provider, mode) {\n        const auth = getAuth();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        if (mode === 'redirect') {\n            return linkWithRedirect(auth.currentUser, provider);\n        }\n        else {\n            return linkWithPopup(auth.currentUser, provider);\n        }\n    }\n    linkCurrentUserWithCredential(credential) {\n        const auth = getAuth();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return linkWithCredential(auth.currentUser, credential);\n    }\n    requestAppTrackingTransparencyPermission() {\n        this.throwNotAvailableError();\n    }\n    checkAppTrackingTransparencyPermission() {\n        this.throwNotAvailableError();\n    }\n    createSignInResult(userCredential, authCredential) {\n        const userResult = this.createUserResult((userCredential === null || userCredential === void 0 ? void 0 : userCredential.user) || null);\n        const credentialResult = this.createCredentialResult(authCredential);\n        const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n        const result = {\n            user: userResult,\n            credential: credentialResult,\n            additionalUserInfo: additionalUserInfoResult,\n        };\n        return result;\n    }\n    createCredentialResult(credential) {\n        if (!credential) {\n            return null;\n        }\n        const result = {\n            providerId: credential.providerId,\n        };\n        if (credential instanceof OAuthCredential) {\n            result.accessToken = credential.accessToken;\n            result.idToken = credential.idToken;\n            result.secret = credential.secret;\n        }\n        return result;\n    }\n    createUserResult(user) {\n        if (!user) {\n            return null;\n        }\n        const result = {\n            displayName: user.displayName,\n            email: user.email,\n            emailVerified: user.emailVerified,\n            isAnonymous: user.isAnonymous,\n            metadata: this.createUserMetadataResult(user.metadata),\n            phoneNumber: user.phoneNumber,\n            photoUrl: user.photoURL,\n            providerData: this.createUserProviderDataResult(user.providerData),\n            providerId: user.providerId,\n            tenantId: user.tenantId,\n            uid: user.uid,\n        };\n        return result;\n    }\n    createUserMetadataResult(metadata) {\n        const result = {};\n        if (metadata.creationTime) {\n            result.creationTime = Date.parse(metadata.creationTime);\n        }\n        if (metadata.lastSignInTime) {\n            result.lastSignInTime = Date.parse(metadata.lastSignInTime);\n        }\n        return result;\n    }\n    createUserProviderDataResult(providerData) {\n        return providerData.map(data => ({\n            displayName: data.displayName,\n            email: data.email,\n            phoneNumber: data.phoneNumber,\n            photoUrl: data.photoURL,\n            providerId: data.providerId,\n            uid: data.uid,\n        }));\n    }\n    createAdditionalUserInfoResult(credential) {\n        if (!credential) {\n            return null;\n        }\n        const additionalUserInfo = getAdditionalUserInfo(credential);\n        if (!additionalUserInfo) {\n            return null;\n        }\n        const { isNewUser, profile, providerId, username } = additionalUserInfo;\n        const result = {\n            isNewUser,\n        };\n        if (providerId !== null) {\n            result.providerId = providerId;\n        }\n        if (profile !== null) {\n            result.profile = profile;\n        }\n        if (username !== null && username !== undefined) {\n            result.username = username;\n        }\n        return result;\n    }\n    getErrorMessage(error) {\n        if (error instanceof Object &&\n            'message' in error &&\n            typeof error['message'] === 'string') {\n            return error['message'];\n        }\n        return JSON.stringify(error);\n    }\n    throwNotAvailableError() {\n        throw new Error('Not available on web.');\n    }\n}\nFirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT = 'authStateChange';\nFirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT = 'idTokenChange';\nFirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT = 'phoneCodeSent';\nFirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT = 'phoneVerificationFailed';\nFirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\nFirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING = 'phoneNumber must be provided.';\nFirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING = 'recaptchaVerifier must be provided and must be an instance of RecaptchaVerifier.';\nFirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING = 'No confirmation result with this verification id was found.';\n//# sourceMappingURL=web.js.map"],"names":["FirebaseAuthenticationWeb","WebPlugin","auth","getAuth","user","options","applyActionCode","userCredential","createUserWithEmailAndPassword","confirmPasswordReset","verificationCode","verificationId","confirmationResult","currentUser","deleteUser","fetchSignInMethodsForEmail","getRedirectResult","authCredential","OAuthProvider","isSignInWithEmailLink","provider","ProviderId","EmailAuthProvider","FacebookAuthProvider","GithubAuthProvider","GoogleAuthProvider","RecaptchaVerifier","linkWithPhoneNumber","event","error","TwitterAuthProvider","reload","revokeAccessToken","sendEmailVerification","sendPasswordResetEmail","sendSignInLinkToEmail","Persistence","setPersistence","browserLocalPersistence","browserSessionPersistence","indexedDBLocalPersistence","inMemoryPersistence","signInAnonymously","signInWithCustomToken","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","unlink","updateEmail","updatePassword","updateProfile","port","scheme","connectAuthEmulator","verifyBeforeUpdateEmail","change","result","customParameters","parameter","scope","mode","signInWithRedirect","signInWithPopup","linkWithRedirect","linkWithPopup","credential","linkWithCredential","userResult","credentialResult","additionalUserInfoResult","OAuthCredential","metadata","providerData","data","additionalUserInfo","getAdditionalUserInfo","isNewUser","profile","providerId","username"],"mappings":"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","x_google_ignoreList":[0]}