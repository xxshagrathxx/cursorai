{"version":3,"file":"web-eb977178.js","sources":["../../node_modules/@capacitor-community/http/dist/esm/utils.js","../../node_modules/@capacitor-community/http/dist/esm/cookie.js","../../node_modules/@capacitor-community/http/dist/esm/request.js","../../node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n//# sourceMappingURL=utils.js.map","import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n//# sourceMappingURL=cookie.js.map","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // If body is already a string, then pass it through as-is.\n    if (typeof options.data === 'string') {\n        output.body = options.data;\n    }\n    // Build request initializers based off of content-type\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n//# sourceMappingURL=request.js.map","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async (\n        // @ts-ignore\n        options) => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearAllCookies = async () => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["readBlobAsBase64","blob","resolve","reject","reader","base64String","base64StringWithoutTags","error","encode","str","decode","setCookie","key","value","options","encodedKey","encodedValue","expires","path","getCookies","output","map","cookies","cookie","k","v","entries","getCookie","deleteCookie","clearCookies","normalizeHttpHeaders","headers","originalKeys","acc","index","buildUrlParams","params","shouldEncode","accumulator","entry","item","buildRequestInit","extra","type","form","request","requestInit","urlParams","url","response","contentType","responseType","data","get","post","put","patch","del","HttpWeb","WebPlugin","Request.request","Request.get","Request.post","Request.put","Request.patch","Request.del","Cookie.getCookies","Cookie.setCookie","Cookie.getCookie","Cookie.deleteCookie","Cookie.clearCookies","formData","fetchOptions","Request.buildRequestInit","bytes","chunks","contentLength","done","status","allChunks","position","chunk"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}